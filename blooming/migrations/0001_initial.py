# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-04-02 22:44
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bloomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=40, null=True)),
                ('last_name', models.CharField(blank=True, max_length=40, null=True)),
                ('email', models.CharField(blank=True, max_length=40, null=True)),
                ('professor', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(max_length=4, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassroomBloomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bloomer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classroombloomer_bloomer', to='blooming.Bloomer')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classroombloomer_classroom', to='blooming.Classroom')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('status', models.CharField(choices=[('a', 'accepted'), ('p', 'pending'), ('r', 'rejected')], max_length=1)),
                ('submit_time', models.DateTimeField(auto_now_add=True)),
                ('interval', models.DurationField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('kind', models.CharField(choices=[('ibool', 'instant boolean'), ('imulti', 'instant multiple'), ('iopen', 'instant open'), ('pbool', 'paperwork boolean'), ('pmulti', 'paperwork multiple'), ('popen', 'paperwork open'), ('delay', 'delayed'), ('eval', 'evaluation')], max_length=8)),
                ('note', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=80)),
                ('bloom_index', models.IntegerField(blank=True, choices=[(1, 'remembering'), (2, 'understanding'), (3, 'applying'), (4, 'analyzing'), (5, 'evaluating'), (6, 'creating')], null=True)),
                ('mobile', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TopicClassroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topicclassroom_classroom', to='blooming.Classroom')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topicclassroom_topic', to='blooming.Topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topicdependency_ante', to='blooming.Topic')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topicdependency_post', to='blooming.Topic')),
            ],
        ),
        migrations.AddField(
            model_name='score',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_topic', to='blooming.Topic'),
        ),
        migrations.AddField(
            model_name='score',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_topic', to='blooming.Topic'),
        ),
        migrations.AddField(
            model_name='option',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_question', to='blooming.Question'),
        ),
        migrations.AddField(
            model_name='option',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
